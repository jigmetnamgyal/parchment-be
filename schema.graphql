type Certificate {
  awardedTo: String!
  description: String!
  id: ID!
  institutionLogoUrl: String!
  institutionName: String!
  major: String!
  user: User!
}

"""
Autogenerated input type of CreateCertificate
"""
input CreateCertificateInput {
  attributes: GenerateCertificateAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
A valid URL, transported as a string
"""
scalar File

input GenerateCertificateAttributes {
  awardedTo: String!
  description: String!
  institutionLogo: File!
  institutionName: String!
  major: String!
}

"""
Autogenerated input type of GenerateCertificatePdf
"""
input GenerateCertificatePdfInput {
  certificateId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of GenerateCertificatePdf
"""
type GenerateCertificatePdfPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  url: String
}

enum InstitutionEnum {
  college
  school
}

enum KycStatusEnum {
  approved
  in_progress
  rejected
}

type Mutation {
  createCertificate(
    """
    Parameters for CreateCertificate
    """
    input: CreateCertificateInput!
  ): Certificate
  generateCertificatePdf(
    """
    Parameters for GenerateCertificatePdf
    """
    input: GenerateCertificatePdfInput!
  ): GenerateCertificatePdfPayload
  sendForKyc(
    """
    Parameters for SendForKyc
    """
    input: SendForKycInput!
  ): Profile
}

type Profile {
  documentUrl: [String!]!
  emailAddress: String!
  firstName: String!
  id: ID!
  institutionName: String!
  institutionType: InstitutionEnum!
  kycStatus: KycStatusEnum!
  lastName: String!
  user: User!
}

type Query {
  profile: Profile
  profiles: [Profile!]
}

input SendForKycAttributes {
  documentUrl: [String!]!
  emailAddress: String!
  firstName: String!
  institutionName: String!
  institutionType: String!
  lastName: String!
}

"""
Autogenerated input type of SendForKyc
"""
input SendForKycInput {
  attributes: SendForKycAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type User {
  id: ID!
  walletAddress: String!
}
