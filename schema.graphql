input Attributes {
  traitType: String!
  value: String!
}

type Certificate {
  awardedTo: String!
  description: String!
  id: ID!
  institutionLogoUrl: String!
  institutionName: String!
  major: String!
  user: User!
}

"""
Autogenerated input type of CreateCertificate
"""
input CreateCertificateInput {
  attributes: GenerateCertificateAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

input CreateMetaDataAttributes {
  description: String!
  imageUrl: String!
  name: String!
  traits: [Attributes!]!
}

"""
Autogenerated input type of CreateMetaData
"""
input CreateMetaDataInput {
  attributes: CreateMetaDataAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

input GenerateCertificateAttributes {
  awardedTo: String!
  description: String!
  institutionLogoUrl: String!
  institutionName: String!
  major: String!
}

"""
Autogenerated input type of GenerateCertificatePdf
"""
input GenerateCertificatePdfInput {
  certificateId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of GenerateCertificatePdf
"""
type GenerateCertificatePdfPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  url: String
}

input GenerateCertificateWithQrAttributes {
  certificateId: String!
  qrCodeUrl: String!
}

"""
Autogenerated input type of GenerateCertificateWithQr
"""
input GenerateCertificateWithQrInput {
  attributes: GenerateCertificateWithQrAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of GenerateCertificateWithQr
"""
type GenerateCertificateWithQrPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  url: String
}

enum InstitutionEnum {
  college
  school
}

enum KycStatusEnum {
  approved
  in_progress
  rejected
}

type MetaData {
  description: String!
  id: ID!
  imageUrl: String!
  name: String!
  triats: [Triats!]!
}

type Mutation {
  createCertificate(
    """
    Parameters for CreateCertificate
    """
    input: CreateCertificateInput!
  ): Certificate
  createMetaData(
    """
    Parameters for CreateMetaData
    """
    input: CreateMetaDataInput!
  ): MetaData
  generateCertificatePdf(
    """
    Parameters for GenerateCertificatePdf
    """
    input: GenerateCertificatePdfInput!
  ): GenerateCertificatePdfPayload
  generateCertificateWithQr(
    """
    Parameters for GenerateCertificateWithQr
    """
    input: GenerateCertificateWithQrInput!
  ): GenerateCertificateWithQrPayload
  sendForKyc(
    """
    Parameters for SendForKyc
    """
    input: SendForKycInput!
  ): Profile
  updateKycStatus(
    """
    Parameters for UpdateKycStatus
    """
    input: UpdateKycStatusInput!
  ): Profile
}

type Profile {
  approvedCount: Int!
  documentUrl: [String!]!
  emailAddress: String!
  firstName: String!
  id: ID!
  inProgressCount: Int!
  institutionName: String!
  institutionType: InstitutionEnum!
  kycStatus: KycStatusEnum!
  lastName: String!
  rejectedCount: Int!
  user: User!
}

type Query {
  profile(id: ID): Profile
  profiles(kycStatus: KycStatusEnum): [Profile!]
}

input SendForKycAttributes {
  documentUrl: [String!]!
  emailAddress: String!
  firstName: String!
  institutionName: String!
  institutionType: String!
  lastName: String!
}

"""
Autogenerated input type of SendForKyc
"""
input SendForKycInput {
  attributes: SendForKycAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Triats {
  traitType: ID!
  value: String!
}

input UpdateKycStatusAttributes {
  id: ID!
  kycStatus: KycStatusEnum!
}

"""
Autogenerated input type of UpdateKycStatus
"""
input UpdateKycStatusInput {
  attributes: UpdateKycStatusAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type User {
  id: ID!
  walletAddress: String!
}
